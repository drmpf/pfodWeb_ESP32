// Dwg_Slider.cpp  file ==============
// generated by pfodWeb Designer Arduino Export V1.0.1
/*   
 * (c)2025 Forward Computing and Control Pty. Ltd.
 * NSW Australia, www.forward.com.au
 * This code is not warranted to be fit for any purpose. You may only use it at your own risk.
 * This generated code may be freely used for both private and commercial use
 * provided this copyright is maintained.
 */

#include "Dwg_Slider.h"
Dwg_Slider dwg_Slider;
pfodDrawing& mainDwg = dwg_Slider;


static unsigned long dwgRefresh = 0;

int colOffset = 0;

// return true if handled else false
// either handle cmd here or in main sketch
bool Dwg_Slider::processDwgCmds() {
// byte dwgCmd = parserPtr->parseDwgCmd(); // pfodParse calls this automagically before calling this method
  if (!(*(parserPtr->getDwgCmd()))) {  // ==> getDwgCmd returned pointer to empty string
    return false; // not dwg cmd, not handled
  }
  if (parserPtr->dwgCmdEquals(cmd_c1)) { // handle touchZone cmd_c1
    // parserPtr->printDwgCmdReceived(&Serial); // does nothing if passed NULL
    // add your cmd handling code here
    colOffset = parserPtr->getTouchedCol(); // another name for getTouchedX()
    sendUpdate();
    return true;
  }

  // Serial.print("dwgCmd did not match:");Serial.println(cmd_c1);
  return false; // not handled
}

bool Dwg_Slider::sendDwg() {
  if (!parserPtr->cmdEquals(*this)) {
    return false; // not this dwg's loadCmd
  }  // else
  if (parserPtr->isRefresh()) { // refresh just send update
    sendUpdate();
  } else {
    sendFullDrawing();
  }
  return true;
}

// all the indexed items are included here, edit as needed for updates
void Dwg_Slider::sendIndexedItems() {
    dwgsPtr->rectangle().filled().idx(idx_1).color(dwgsPtr->RED).size(colOffset,5).offset(0,16).send();
    dwgsPtr->label().idx(idx_4).color(dwgsPtr->WHITE).text("Slider ").fontSize(8).offset(50,28.5).center().intValue(colOffset).units("%").maxValue(100).minValue(0).displayMax(100).displayMin(0).decimals(0).send();
}
        
void Dwg_Slider::sendFullDrawing() {
    // Start the drawing
    dwgsPtr->start(110, 40, dwgsPtr->BLUE);
    parserPtr->sendRefreshAndVersion(dwgRefresh); // sets version and refresh time for dwg pfodWeb processes this
    dwgsPtr->pushZero(5, 0, 1);
    dwgsPtr->rectangle().filled().color(dwgsPtr->WHITE).size(100,5).offset(0,16).send();
    dwgsPtr->touchZone().cmd(cmd_c1).size(100,5).offset(0,16).filter(dwgsPtr->DOWN_DRAG_UP).send();
    dwgsPtr->touchAction().cmd(cmd_c1).action(dwgsPtr->line().idx(idx_2).color(dwgsPtr->WHITE).size(0,-7).offset(dwgsPtr->TOUCHED_COL,16)).send();
    dwgsPtr->touchAction().cmd(cmd_c1).action(dwgsPtr->label().idx(idx_3).color(dwgsPtr->WHITE).text("").offset(dwgsPtr->TOUCHED_COL,7).center().intValue(dwgsPtr->TOUCHED_COL).units("%").maxValue(100).minValue(0).displayMax(100).displayMin(0).decimals(0)).send();
    dwgsPtr->index().idx(idx_1).send(); // place holder for indexed item
    dwgsPtr->index().idx(idx_2).send(); // place holder for indexed item
    dwgsPtr->index().idx(idx_3).send(); // place holder for indexed item
    dwgsPtr->index().idx(idx_4).send(); // place holder for indexed item
    sendIndexedItems(); // update indexed items with their real values
    dwgsPtr->end();
}
        
// only indexed items can be sent as an update
// all the indexed items are included here, edit as needed
void Dwg_Slider::sendUpdate() {
    dwgsPtr->startUpdate();
    sendIndexedItems(); // send updated indexed items        
    dwgsPtr->end();
}
// ============== end of Dwg_Slider.cpp  file 
